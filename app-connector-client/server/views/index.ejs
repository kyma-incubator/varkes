<!-- The drawer is always open in large screens. The header is always shown,
  even in small screens. -->
<html>

<head>
    <title>
        <%= appName %>
    </title>

    <link rel="icon" href="favicon.ico?" type="image/x-icon">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <link href="/css/jsoneditor.min.css" rel="stylesheet" type="text/css">
    <script src="/js/json.editor.min.js"></script>

    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
    <link rel="stylesheet" href="https://code.getmdl.io/1.3.0/material.indigo-pink.min.css">
    <script defer src="https://code.getmdl.io/1.3.0/material.min.js"></script>
</head>

<body>
    <div class="mdl-layout mdl-js-layout mdl-layout--fixed-drawer
                  mdl-layout--fixed-header">
        <header class="mdl-layout__header">
            <div class="mdl-layout__header-row" style="background-color: rgb(250, 250, 250)">
                <image width="50" height="50" id="app-logo" srcset="/logo" />
                <span style="color: black" id="app-title" class="mdl-layout-title">
                    <%= appName %></span>
                <div class="mdl-layout-spacer"></div>


            </div>
        </header>
        <div class="mdl-layout__drawer">
            <span class="mdl-layout-title" id="api-title">Connect to Kyma</span>
            <nav class="mdl-navigation">
                <div id="kymaConnect">
                    <div class="mdl-textfield mdl-js-textfield">
                        <input class="mdl-textfield__input" type="text" id="tokenInput">
                        <label class="mdl-textfield__label" for="sample1">Token</label>
                    </div>
                    <div>
                        <input id="insecureConnection" type="checkbox" name="insecureConnection">Insecure Connection<br>
                    </div>

                    <br />
                    <button class="mdl-button mdl-js-button mdl-button--raised mdl-button--colored"
                        id="get_certificates" onclick="giveToken()">Connect to Kyma
                    </button>
                </div>
                <button hidden class="mdl-button mdl-js-button mdl-button--raised mdl-button--accent"
                    id="disconnect_button">
                    Disconnect
                </button>
                <br>
                <button hidden class="mdl-button mdl-js-button mdl-button--raised mdl-button--colored"
                    id="register_button">
                    Batch Registration
                </button>
                <br>
                <button hidden class="mdl-button mdl-js-button mdl-button--raised mdl-button--colored"
                    id="reload_button" onclick="getAPIs()">
                    Reload
                </button>
                <br>

            </nav>
            <hr style="height: 12px; border: 0; box-shadow: inset 0 12px 12px -12px rgba(0, 0, 0, 0.5);">
            <span class="mdl-layout-title" id="api-title">APIs</span>
            <nav class="mdl-navigation">
                <div id="apis">
                    <ul class="demo-list-item mdl-list">

                    </ul>
                    <button class="mdl-button mdl-js-button mdl-button--raised mdl-button--colored"
                        onclick="newServiceView()">
                        New API
                    </button>
                </div>
                <br />
                <div id="downloadLinks" style="display: none;padding-bottom: 5px">
                    <a href="/connection/cert" download="kyma">
                        Download Certificate
                    </a>
                    <br />
                    <a href="/connection/key" download="app">
                        Download Key
                    </a>
                    <br />
                    <label>Metadata URL:</label><br>
                    <input type="text" id="metadata_url" readonly><br>
                    <label>Event URL:</label><br>
                    <input type="text" id="event_url" readonly><br>
                    <button onclick="copyToClipboard('#metadata_url')">Copy Metadata Url</button>
                    <button onclick="copyToClipboard('#event_url')">Copy
                        Event Url</button>
                </div>
            </nav>
        </div>
        <main class="mdl-layout__content">
            <div class="page-content">
                <!-- Your content goes here -->
                <table style="width:100%">
                    <tr>
                        <th>
                            API
                        </th>
                        <th>
                            Event
                        </th>
                    </tr>
                    <tr>
                        <td>
                            <div id="ed" style="text-align: -webkit-center">
                                <div id="jsoneditor" style="width: 700px; height: 600px;"></div>
                                <button
                                    class="mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent"
                                    id="create_service" onclick="createService()">Create
                                    API
                                </button>
                                <button
                                    class="mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent"
                                    id="update_service">Update
                                    API
                                </button>
                                <button
                                    class="mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent"
                                    id="delete_service">Delete
                                    API
                                </button>

                            </div>
                        </td>
                        <td>
                            <div class="page-content">
                                <!-- Your content goes here -->
                                <div id="user-input" style="float:left">
                                    <label>Event Type:</label><br>
                                    <select onchange="fillEventEditor()" id="event-types">
                                    </select>
                                    <br>
                                    <label>Event Data:</label><br>
                                    <textarea id="payload" style="width: 700px; height: 500px;"></textarea><br>
                                    <button
                                        class="mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent"
                                        id="send_event" onclick="sendEvent()">Send Event</button>
                                </div>
                                <div id="events">
                                    <ul class="demo-list-item mdl-list">

                                    </ul>

                                </div>
                            </div>
                        </td>
                    </tr>
                </table>
            </div>
        </main>
    </div>

    </div>


</body>


<script>
    var remote_env_url = "";
    var hostname = "";
    $(document).ready(function () {
        newServiceView()
        getAPIs()
        $("#create_service").hide();
        hostname = window.location.origin;
    })
    function newServiceView() {
        editor.set(json);
        $("#create_service").show()
        $("#update_service").hide()
        $("#delete_service").hide()
    }
    function copyToClipboard(element) {
        $(element).select()
        document.execCommand("copy");
    }
    function deleteService(serviceID) {
        $.ajax({
            url: `/remote/apis/${serviceID}`,
            type: "DELETE",
            success: function (data) {
                getAPIs()
                newServiceView()
            },
            error: function (data) {
                if (data.responseText) {
                    window.alert(data.responseText);
                }
                else {
                    showGeneralErrorMessage()
                }
            }
        })
    }
    function getAPIs() {
        $("#tokenInput").val('')
        $("#apis ul").empty()
        $.ajax(
            {
                type: "get",
                url: "/remote/apis",
                success: function (data) {
                    data.forEach(element => {
                        if (element.id && element.id != "") {
                            $("#apis ul").append
                                (`
                                                <a href="#" onClick=showService('${element.id}') class="mdl-navigation__link">
                                
                                   ${element.name}
                                
                                                </a>`)
                        }
                    });
                    //getConnectionInfo()
                }
            }
        ).fail(function (xhr, options, error) {
            $("#apis ul").text("No certificate defined, please provide a token url")
        })
    }
    function createService() {
        $.ajax({
            type: "POST",
            url: "/remote/apis",
            data: JSON.stringify(editor.get()),
            success: function (data) {
                getAPIs()
                showService(data.id)
            },
            error: function (data) {
                if (data.responseText) {
                    window.alert(data.responseText);
                }
                else {
                    showGeneralErrorMessage()
                }
            },
            contentType: "application/json"
        }
        )
    }
    function updateService(serviceId) {
        $.ajax({
            type: "PUT",
            url: "/remote/apis/" + `${serviceId}`,
            data: JSON.stringify(editor.get()),
            success: function (data) {
                getAPIs()
            },
            error: function (data) {
                if (data.responseText) {
                    window.alert(data.responseText);
                }
                else {
                    showGeneralErrorMessage()
                }
            },
            contentType: "application/json"
        })
    }
    function giveToken() {
        var sendData = {
            url: $("#tokenInput").val(),
            hostname: hostname,
            insecure: $("#insecureConnection").is(':checked')
        }
        $.ajax({
            type: "POST",
            url: "/connection",
            data: JSON.stringify(sendData),
            success: function (data) {
                $('#create_service').show();
                $('#downloadLinks').show();
                changeButtonToDisconnectKyma()
                if (data.metadataUrl)
                    $('#metadata_url').val(data.metadataUrl)
                if (data.eventsUrl)
                    $('#event_url').val(data.eventsUrl)
                getAPIs();
            },
            error: function (data) {
                if (data.responseText) {
                    window.alert(data.responseText);
                }
                else {
                    showGeneralErrorMessage()
                }
                $("#tokenInput").val('');
            },
            contentType: "application/json"
        }
        )
    }
    function changeButtonToDisconnectKyma() {
        connectDiv = $("#kymaConnect")
        connectDiv.hide()

        disconnectButton = $("#disconnect_button")
        disconnectButton.removeAttr("hidden")
        registerButton = $("#register_button")
        registerButton.removeAttr("hidden")
        reloadButton = $("#reload_button")
        reloadButton.removeAttr("hidden")
        $('#downloadLinks').show();
        disconnectButton.click(function () {
            $.ajax({
                type: "DELETE",
                url: "/connection",
                success: function (data) {
                    location.reload()
                },
                error: function (data) {
                    if (data.responseText) {
                        window.alert(data.responseText);
                    }
                    else {
                        showGeneralErrorMessage()
                    }
                }
            })
        })
        registerButton.click(function () {
            $.ajax({
                type: "POST",
                url: "/local/apis/registration",
                data: JSON.stringify({ hostname: hostname }),
                success: function (data) {
                    getAPIs()
                },
                error: function (data) {
                    if (data.responseText) {
                        window.alert(data.responseText);
                    }
                    else {
                        showGeneralErrorMessage()
                    }
                }
            })
        })
    }
    function showService(serviceID) {
        $.ajax({
            type: "get",
            url: "/remote/apis/" + `${serviceID}`,
            success: function (data) {
                data.id = serviceID
                parseAPIEventsToComboBox(data)
            },
            error: function (data) {
                if (data.responseText) {
                    window.alert(data.responseText);
                }
                else {
                    showGeneralErrorMessage()
                }
            }
        })
        $.ajax({
            type: "get",
            url: "/remote/apis/" + `${serviceID}`,
            success: function (data) {
                data.id = serviceID
                $("#serviceJSON").val(JSON.stringify(data))
                editor.set(data)
                $("#create_service").hide()
                $("#update_service").show()
                $("#update_service").attr("onclick", `updateService("${serviceID}")`)
                $("#delete_service").show()
                $("#delete_service").attr("onclick", `deleteService("${serviceID}")`)
            },
            error: function (data) {
                if (data.responseText) {
                    window.alert(data.responseText);
                }
                else {
                    showGeneralErrorMessage()
                }
            }
        })
    }
    function getConnectionInfo() {
        $.ajax({
            type: "get",
            url: "/connection",
            success: function (data) {
                $("#api-title").html(`Registered to Kyma \n <p> Connected to <a href=${data.consoleUrl} target="_blank" >${data.application}</a> in <b>${data.domain}</b>`)
                changeButtonToDisconnectKyma()
                if (data.metadataUrl)
                    $('#metadata_url').val(data.metadataUrl)
                if (data.eventsUrl)
                    $('#event_url').val(data.eventsUrl)
            },
            error: function (data) {
                if (data.responseText) {
                    window.alert(data.responseText);
                }
                else {
                    showGeneralErrorMessage()
                }
                $("#tokenInput").val('');
            }
        })
    }
    function sendEvent() {
        //collect event data from user input
        var sel = $("#event-types").select()[0];
        sel[sel.selectedIndex].innerHTML
        eventType = sel[sel.selectedIndex].innerHTML
        eventTime = new Date().toISOString()
        eventData = JSON.parse($("#payload").val())
        var version = eventType.substring(eventType.lastIndexOf(".") + 1)
        eventType = eventType.substring(0, eventType.lastIndexOf("."))
        event = {
            "event-type": eventType,
            "event-type-version": version, //event types normally end with .v1
            "event-time": eventTime,
            "data": eventData
        }
        //send event to kyma
        $.ajax({
            type: "POST",
            url: "/events",
            data: JSON.stringify(event),
            success: function (data) {
                $("#events ul").append(`${data["event-id"]}`)
            },
            error: function (data) {
                if (data.responseText) {
                    window.alert(data.responseText);
                }
                else {
                    showGeneralErrorMessage()
                }
            },
            contentType: "application/json"
        }
        )
    }
    function parseAPIEventsToComboBox(api) {
        if (api.events && api.events.spec) {
            var topics = api.events.spec.topics
            $("#event-types").empty()
            Object.keys(topics).forEach(t => {
                var o = new Option(t, JSON.stringify(topics[t]));
                $("#event-types").append(o);
            });
        }
    }
    function fillEventEditor(e) {
        var select = $('#event-types').select()[0];
        var opt = JSON.parse(select.options[select.selectedIndex].value);
        var json = {}
        $("#payload").val(JSON.stringify(opt.example))
    }
    function showGeneralErrorMessage() {
        window.alert("Something went wrong,please try again later")
    }
    var container = document.getElementById("jsoneditor");
    var options = {};
    var editor = new JSONEditor(container, options);
    // set json
    var json = {
        "provider": "Varkes",
        "name": "test-api-4",
        "description": "testing... 1.2.3.",
        "api": {
            "targetUrl": "http://localhost/target",
            "credentials": {
                "oauth": {
                    "url": "http://localhost/oauth/validate",
                    "clientId": "string",
                    "clientSecret": "string"
                }
            },
            "spec": {}
        },
        "documentation": {
            "displayName": "string",
            "description": "string",
            "type": "string",
            "tags": [
                "string"
            ],
            "docs": [
                {
                    "title": "string",
                    "type": "string",
                    "source": "string"
                }
            ]
        }
    };
    editor.set(json);
</script>

</html>