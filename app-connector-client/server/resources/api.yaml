openapi: '3.0.0'
info:
  version: '0.1.0'
  title: 'Varkes Application Connector Client'
  description: 'Client for connecting an application to a Kyma cluster'
paths:
  /metadata:
    get:
      tags:
        - 'metadata'
      summary: 'Returns this OpenAPI definition'
      responses:
        '200':
          description: "Successful"
          content:
            application/yaml:
              type: yaml
  /connection:
    post:
      tags:
        - 'connection'
      summary: "Connects the mock to a Kyma cluster"
      parameters:
      - in: 'query'
        name: 'localKyma'
        description: 'Connected Kyma cluster is running in minikube?'
        required: false
        schema:
          type: 'boolean'
      - in: 'body'
        name: 'url'
        schema:
          type: 'string'
          example: 'https://kyma-cluster/v1/applications/sampleApp/info?token=xxx'
        required: true
        description: 'The token url provided by the Kyma cluster to connect to'
      - in: 'body'
        name: 'register'
        schema:
          type: 'boolean'
        required: false
        description: 'On connect, should the mock register all bundled APIs?'
      - in: 'body'
        name: 'hostname'
        schema:
          type: 'string'
          example: 'http://localhost:10000'
        required: true
        description: 'The url to the mock so that a Kyma cluster can reach the mocked APIs'
      responses:
       '200':
        description: 'Successful connection to Kyma'
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                metadataUrl:
                  type: 'string'
                  description: 'URL on connected Kyma cluster to manage APIs'
                eventsUrl:
                  type: 'string'
                  description: 'URL on connected Kyma cluster to send events'
                consoleUrl:
                  type: 'string'
                  description: 'URL on connected Kyma cluster to browse console'
                domain:
                  type: 'string'
                  description: 'Domain of the connected Kyma cluster'
                app:
                  type: 'string'
                  description: 'Application on connected Kyma cluster'
       '401':
          description: 'Connection is not authorized, usually the provided token is not valid'
          content:
            text/plain:
              schema:
                type: 'string'
                example: There is an error while registering. Please make sure that your token is unique and valid
    get:
      summary: Returns active connection info
      responses:
        '200':
          description: "Currently connected application and cluster"
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  metadataUrl:
                    type: 'string'
                    description: 'URL on connected Kyma cluster to manage APIs'
                  eventsUrl:
                    type: 'string'
                    description: 'URL on connected Kyma cluster to send events'
                  consoleUrl:
                    type: 'string'
                    description: 'URL on connected Kyma cluster to browse console'
                  domain:
                    type: 'string'
                    description: 'Domain of the connected Kyma cluster'
                  app:
                    type: 'string'
                    description: 'Application on connected Kyma cluster'
    delete:
      summary: Disconnects the mock from current kyma cluster
      responses:
        204:
          description: Disconnection was successful
  /connection/key:
    get:
      summary: 'Gets the private key used by the mock'
      responses:
        '200':
          description: Private key of the mock
          content:
            application/file:
             schema:
               type: 'string'
               format: binary
  /connection/cert:
    get:
      summary: Get the client certificate for connected Kyma cluster
      responses:
        '200':
          description: client certificate for connected Kyma cluster
          content:
            application/file:
             schema:
               type: 'string'
               format: binary
  /events:
    post:
      summary: 'Sends a new event to the connected Kyma cluster'
      requestBody:
        description: 'Event payload'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventDetails'
      parameters:
      - in: 'query'
        name: 'localKyma'
        description: 'deployment to local kyma'
        required: true
        schema:
          type: 'boolean'
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceId'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataErrorResponse'
  /apis:
    post:
      summary: 'Registers a new API on the connected Kyma cluster'
      requestBody:
        description: 'API to be registered'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceDetails'
      parameters:
      - in: 'query'
        name: 'localKyma'
        description: 'deployment to local kyma'
        required: true
        schema:
          type: 'boolean'
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceId'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataErrorResponse'
    get:
      summary: 'Gets all registered apis on connected Kyma cluster'
      parameters:
      - in: 'query'
      name: 'localKyma'
      description: 'deployment to local kyma'
      required: true
      schema:
        type: 'boolean'
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: 'array'
                items:
                  $ref: '#/components/schemas/Service'
  /apis/{Id}:
    get:
      summary: 'Gets a API by ID from connected Kyma cluster'
      parameters:
      - in: 'path'
        name: 'id'
        description: 'ID of a API'
        required: true
        schema:
          type: 'string'
          format: 'uuid'
      - in: 'query'
        name: 'localKyma'
        description: 'deployment to local kyma'
        required: true
        schema:
          type: 'boolean'
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceDetails'
        '404':
          description: 'API not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataErrorResponse'
    put:
      summary: 'Updates a API by ID on connected Kyma cluster'
      requestBody:
        description: 'API to be stored'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceDetails'
      parameters:
      - in: 'path'
        name: 'Id'
        description: 'ID of a service'
        required: true
        schema:
          type: 'string'
          format: 'uuid'
      - in: 'query'
        name: 'localKyma'
        description: 'deployment to local kyma'
        required: true
        schema:
          type: 'boolean'
      responses:
        '200':
          description: 'Successful operation'
        '404':
          description: 'API not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataErrorResponse'
    delete:
      summary: 'Deletes a API by ID on connected Kyma cluster'
      parameters:
      - in: 'path'
        name: 'Id'
        description: 'ID of a API'
        required: true
        schema:
          type: 'string'
          format: 'uuid'
      - in: 'query'
        name: 'localKyma'
        description: 'deployment to local kyma'
        required: true
        schema:
          type: 'boolean'
      responses:
        '204':
          description: 'Successful operation'
        '404':
          description: 'API not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataErrorResponse'
components:
  schemas:
    ServiceId:
      type: 'object'
      properties:
        id:
          type: 'string'
          format: 'uuid'
    ServiceDetails:
      type: 'object'
      properties:
        provider:
          type: 'string'
        name:
          type: 'string'
        description:
          type: 'string'
        api:
          $ref: '#/components/schemas/Api'
        events:
          $ref: '#/components/schemas/Events'
        documentation:
          $ref: '#/components/schemas/Documentation'
      required:
        - provider
        - name
        - description
    Service:
      type: 'object'
      properties:
        id:
          type: 'string'
          format: 'uuid'
        provider:
          type: 'string'
        name:
          type: 'string'
        description:
          type: 'string'
    Api:
      type: 'object'
      properties:
        targetUrl:
          type: 'string'
          format: 'uri'
        credentials:
          $ref: '#/components/schemas/ApiCredentials'
        spec:
          type: 'object'
          description: 'OpenApi v2 swagger file: https://github.com/OAI/OpenAPI-Specification/blob/master/schemas/v2.0/schema.json'
      required:
        - targetUrl
    Events:
      type: 'object'
      properties:
        spec:
          description: 'AsynApi file v1: https://github.com/asyncapi/asyncapi/blob/develop/schema/asyncapi.json'
          type: 'object'
    EventDetails:
      type: 'object'
      properties:
        event-type:
          description: 'Type of event'
          type: 'string'
        event-type-version:
          description: version of event type
          type: 'string'
        event-time:
          description: 'time when event was send'
        data:
          description: 'event payload'
          tyoe: 'object'
    Documentation:
      type: 'object'
      properties:
        displayName: 
          type: 'string'
        description: 
          type: 'string'
        type:
          type: 'string'
        tags:
          type: 'array'
          items: 
            type: 'string'
        docs:
          type: 'array'
          items:
            $ref: '#/components/schemas/Document'
      required:
        - displayName
        - description
        - type
    Document:
      type: 'object'
      properties:
        title:
          type: 'string'
        type:
          type: 'string'
        source:
          type: 'string'
      required:
        - title
        - type
        - source
    ApiCredentials:
      type: 'object'
      properties:
        oauth:
          $ref: '#/components/schemas/OAuth'
      required:
        - oauth
    OAuth:
      type: 'object'
      properties:
        url:
          type: 'string'
          format: 'uri'
        clientId:
          type: 'string'
        clientSecret:
          type: 'string'
      required:
        - url
        - clientId
        - clientSecret
    MetadataErrorResponse:
      type: 'object'
      properties:
        code:
          type: 'integer'
        error:
          type: 'string'