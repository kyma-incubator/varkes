openapi: "3.0.0"
info:
  version: "1.0.0"
  title: "Varkes Application Connector Client"
  description: "Client for connecting an application to a Kyma cluster"
paths:
  /connection:
    post:
      tags:
        - "connection"
      summary: "Connects the mock to a Kyma cluster"
      parameters:
        - in: "query"
          name: "localKyma"
          description: "Connected Kyma cluster is running in minikube?"
          required: false
          schema:
            type: "boolean"
      requestBody:
        description: "Connection details of the Kyma cluster"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConnectionDetails"
      responses:
        "200":
          description: "Successful connection to Kyma"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConnectionResponse"
        "401":
          description: "Connection is not authorized, usually the provided token is not valid"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: string
                    example: There is an error while registering. Please make sure that your token is unique
    get:
      tags:
        - "connection"
      summary: Returns active connection info
      responses:
        "200":
          description: "Currently connected application and cluster"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConnectionResponse"
        "400":
          description: "Not connected to Kyma cluster"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags:
        - "connection"
      summary: Disconnects the mock from current kyma cluster
      responses:
        204:
          description: Disconnection was successful
        400:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /connection/key:
    get:
      tags:
        - "connection"
      summary: "Gets the private key used by the mock"
      responses:
        "200":
          description: Private key of the mock
          content:
            application/file:
              schema:
                $ref: "#/components/schemas/KeyFile"
        "400":
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /connection/cert:
    get:
      tags:
        - "connection"
      summary: Get the client certificate for connected Kyma cluster
      responses:
        "200":
          description: client certificate for connected Kyma cluster
          content:
            application/file:
              schema:
                $ref: "#/components/schemas/KeyFile"
        "400":
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /events:
    post:
      tags:
        - "event"
      summary: "Sends a new event to the connected Kyma cluster"
      requestBody:
        description: "Event payload"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EventDetails"
      parameters:
        - in: "query"
          name: "localKyma"
          description: "deployment to local kyma"
          required: true
          schema:
            type: "boolean"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceId"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /apis:
    post:
      tags:
        - "api"
      summary: "Registers a new API on the connected Kyma cluster"
      requestBody:
        description: "API to be registered"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServiceDetails"
      parameters:
        - in: "query"
          name: "localKyma"
          description: "deployment to local kyma"
          required: true
          schema:
            type: "boolean"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceId"
        "4XX":
          description: "Error message returned by server"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "500":
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    get:
      tags:
        - "api"
      summary: "Gets all registered apis on connected Kyma cluster"
      parameters:
        - in: "query"
          name: "localKyma"
          description: "deployment to local kyma"
          required: true
          schema:
            type: "boolean"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Service"
        "4XX":
          description: "Error message returned by server"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /apis/{Id}:
    get:
      tags:
        - "api"
      summary: "Gets a API by ID from connected Kyma cluster"
      parameters:
        - in: "path"
          name: "Id"
          description: "ID of a API"
          required: true
          schema:
            type: "string"
            format: "uuid"
        - in: "query"
          name: "localKyma"
          description: "deployment to local kyma"
          required: true
          schema:
            type: "boolean"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceDetails"
        "404":
          description: "API not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          description: "Not Connected"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: "Error while getting API"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    put:
      tags:
        - "api"
      summary: "Updates a API by ID on connected Kyma cluster"
      requestBody:
        description: "API to be stored"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServiceDetails"
      parameters:
        - in: "path"
          name: "Id"
          description: "ID of a service"
          required: true
          schema:
            type: "string"
            format: "uuid"
        - in: "query"
          name: "localKyma"
          description: "deployment to local kyma"
          required: true
          schema:
            type: "boolean"
      responses:
        "200":
          description: "Successful operation"
        "404":
          description: "API not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          description: "Not connected"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Error while updating API
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags:
        - "api"
      summary: "Deletes a API by ID on connected Kyma cluster"
      parameters:
        - in: "path"
          name: "Id"
          description: "ID of a API"
          required: true
          schema:
            type: "string"
            format: "uuid"
        - in: "query"
          name: "localKyma"
          description: "deployment to local kyma"
          required: true
          schema:
            type: "boolean"
      responses:
        "204":
          description: "Successful operation"
        "404":
          description: "API not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: "Error while deleting API"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /metadata:
    get:
      tags:
        - "misc"
      summary: "Returns this OpenAPI definition"
      responses:
        "200":
          description: "Successful"
  /console:
    get:
      tags:
        - "misc"
      summary: Returns openapi console for testing
      responses:
        "200":
          description: "Successful"

components:
  schemas:
    ConnectionDetails:
      type: "object"
      properties:
        token:
          type: "string"
          example: "https://kyma-cluster/v1/applications/sampleApp/info?token=xxx"
          description: "The token url provided by the Kyma cluster to connect to"
        register:
          type: "boolean"
          description: Defines whether you want to auto register your APIs to Kyma while registering

        hostname:
          type: "string"
          example: "http://localhost:10000"
          description: Hostname of the APIs you are registering
      required:
        - token
        - hostname

    ServiceId:
      type: "object"
      properties:
        id:
          type: "string"
          format: "uuid"
          description: ID of the newly created application
    ConnectionResponse:
      type: "object"
      properties:
        metadataUrl:
          type: "string"
          description: "URL on connected Kyma cluster to manage APIs"
          example: https://gateway.mycluster.kyma.cx/event-trial/v1/metadata/services
        eventsUrl:
          type: "string"
          description: "URL on connected Kyma cluster to send events"
          example: https://gateway.mycluster.kyma.cx/event-trial/v1/events
        cluster_domain:
          type: "string"
          description: "Domain of the connected Kyma cluster"
          example: mycluster
        re_name:
          type: "string"
          description: "Application name on connected Kyma cluster"
          example: my application name
    ServiceDetails:
      type: "object"
      properties:
        provider:
          type: "string"
          description: "Name of the provider of the new application"
        name:
          type: "string"
          description: Name of the new application
        description:
          type: "string"
          description: "Summmary of the new application"
        api:
          $ref: "#/components/schemas/Api"
        events:
          $ref: "#/components/schemas/Events"
        documentation:
          $ref: "#/components/schemas/Documentation"
      required:
        - provider
        - name
        - description
    Service:
      type: "object"
      properties:
        id:
          type: "string"
          format: "uuid"
          description: ID of the api
        provider:
          type: "string"
          description: provider of the api
        name:
          type: "string"
          description: name of the api
        description:
          type: "string"
          description: description of the api

    Api:
      description: "The apis that are being registered with the application"
      type: "object"
      properties:
        targetUrl:
          type: "string"
          format: "uri"
          description: "The endpoint of the API"
        credentials:
          $ref: "#/components/schemas/ApiCredentials"
        spec:
          type: "object"
          description: "OpenApi v2 swagger file: https://github.com/OAI/OpenAPI-Specification/blob/master/schemas/v2.0/schema.json"
      required:
        - targetUrl
    Events:
      type: "object"
      description: "Events that are being registered with the application"
      properties:
        spec:
          description: "AsynApi file v1: https://github.com/asyncapi/asyncapi/blob/develop/schema/asyncapi.json"
          type: "object"
    EventDetails:
      type: "object"
      properties:
        event-type:
          description: "Type of event"
          type: "string"
        event-type-version:
          description: "version of event type"
          type: "string"
        event-time:
          description: "time when event was send"
        data:
          description: "event payload"
          type: "object"
          example:
            mykey: myvalue
            somekey: somevalue
    Documentation:
      type: "object"
      description: "Documentation of the Application"
      properties:
        displayName:
          type: "string"
          description: Name of the application
        description:
          type: "string"
          description: Summary of the application
        type:
          type: "string"
          description: Type of the application
        tags:
          type: "array"
          description: Tags of the application
          items:
            type: "string"
        docs:
          type: "array"
          description: Docs of the application
          items:
            $ref: "#/components/schemas/Document"
      required:
        - displayName
        - description
        - type
    Document:
      type: "object"
      description: "Documentation document"
      properties:
        title:
          type: "string"
          description: Title of the document
        type:
          type: "string"
          description: Type of the document
        source:
          type: "string"
          description: Source of the document
      required:
        - title
        - type
        - source
    ApiCredentials:
      type: "object"
      description: Credential endpoint of the API
      properties:
        oauth:
          $ref: "#/components/schemas/OAuth"
      required:
        - oauth
    OAuth:
      type: "object"
      description: OAuth endpoint of the API
      properties:
        url:
          type: "string"
          format: "uri"
        clientId:
          type: "string"
        clientSecret:
          type: "string"
      required:
        - url
        - clientId
        - clientSecret
    ErrorResponse:
      type: "object"
      description: Error returned from the server
      properties:
        error:
          type: "string"
          example: You are not connected. Please try to reconnect
    KeyFile:
      type: "string"
      format: binary
